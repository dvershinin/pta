/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package jp.ad.iij.pta;

import java.nio.ByteBuffer;
import java.util.zip.CRC32;
import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import org.apache.commons.cli.*;

public class App {
  private static String bytesToHex(byte[] bytes) {
    char[] HEX_ARRAY = "0123456789abcdef".toCharArray();
    char[] hexChars = new char[bytes.length * 2];
    for (int j = 0; j < bytes.length; j++) {
      int v = bytes[j] & 0xFF;
      hexChars[j * 2] = HEX_ARRAY[v >>> 4];
      hexChars[j * 2 + 1] = HEX_ARRAY[v & 0x0F];
    }
    return new String(hexChars);
  }

  private static byte[] ptaKeyIvToBytes(String keyiv) {
    ByteBuffer bb = ByteBuffer.wrap(new byte[16]);
    for (int idx = 0; idx < keyiv.length(); idx += 2) {
      String b = keyiv.substring(idx, idx + 2);
      int i = Integer.parseInt(b, 16);
      bb.put((byte) i);
    }
    return bb.array();
  }

  private static byte[] longToBytes(long x) {
    ByteBuffer buffer = ByteBuffer.allocate(Long.BYTES);
    buffer.putLong(x);
    return buffer.array();
  }

  private static byte[] intToBytes(int x) {
    ByteBuffer buffer = ByteBuffer.allocate(Integer.BYTES);
    buffer.putInt(x);
    return buffer.array();
  }

  public static void main(String[] args) {
    Options options = new Options();

    options.addOption(Option.builder().required(false).longOpt("key").hasArg().build());
    options.addOption(Option.builder().required(false).longOpt("iv").hasArg().build());
    options.addOption(Option.builder().required(false).longOpt("date").hasArg().build());
    options.addOption(Option.builder().required(false).longOpt("url").hasArg().build());

    CommandLineParser parser = new DefaultParser();
    CommandLine cmd = null;
    try {
      String ks = "";
      String is = "";
      Long ds = 0L;
      String url = "";

      cmd = parser.parse(options, args);

      ks = cmd.getOptionValue("key", "00112233445566778899aabbccddeeff");
      is = cmd.getOptionValue("iv", "00112233445566778899aabbccddeeff");
      ds = Long.parseLong(cmd.getOptionValue("date", "1893423600"));
      url = cmd.getOptionValue("url", "/example.mp4");

      Cipher encrypter = Cipher.getInstance("AES/CBC/PKCS5Padding");
      SecretKeySpec key = new SecretKeySpec(ptaKeyIvToBytes(ks), "AES");
      IvParameterSpec iv = new IvParameterSpec(ptaKeyIvToBytes(is));
      encrypter.init(Cipher.ENCRYPT_MODE, key, iv);
      byte[] date = longToBytes(ds);
      byte[] plain = new byte[8 + url.length()];
      ByteBuffer plainbuf = ByteBuffer.wrap(plain);
      plainbuf.put(date);
      plainbuf.put(url.getBytes());
      CRC32 crc = new CRC32();
      crc.reset();
      crc.update(plainbuf.array());
      ByteBuffer ptabuf = ByteBuffer.wrap(new byte[4 + 8 + url.length()]);
      byte[] crc32 = new byte[4];
      System.arraycopy(longToBytes(crc.getValue()), 4, crc32, 0, crc32.length);
      ptabuf.put(crc32);
      ptabuf.put(date);
      ptabuf.put(url.getBytes());
      byte[] crypto = encrypter.doFinal(ptabuf.array());
      System.out.printf("%s\n", bytesToHex(crypto));
    } catch (ParseException e) {
      System.out.println("cmd parser failed.");
    } catch (Exception e) {
      System.out.println("failed.");
      e.printStackTrace();
    }
  }
}
